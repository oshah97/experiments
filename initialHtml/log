Notes:

<----------------------------------------------->
~/.bashrce config. (change depending on computer in use)
~/.bash_profile (contains source ~/.bashrc)

PATH=/usr/bin
PATH=$PATH:/bin
PATH=$PATH:/usr/sbin
PATH=$PATH:/sbin
# PATH=$PATH:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9
# PATH=$PATH:/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_9
PATH=$PATH:/usr/local/bin

export PATH

PS1="goldfinger.\W> "
alias dir="ls -l"
alias ddir="ls -l | grep '^d'"

End ~/.bashrc configuration
<------------------------------------------------>
~/.Rprofile configuration (Paul's configuration)

printf = function (...) print (noquote (sprintf (...)))
q <- function(...) quit("no")
wdth <- function(x){options(width=x)}
wdth(2048)
biocGet <- function(pkgName){source("http://bioconductor.org/biocLite.R"); biocLite(pkgName)}

End ~/.Rprofile configuration
<------------------------------------------------>
Links to packages and scripts:


jQuery:
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

jQuery UI:
<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

QUnit:
<link rel="stylesheet" href="https://code.jquery.com/qunit/qunit-2.3.3.css">
  <script src="https://code.jquery.com/qunit/qunit-2.3.3.js"></script>


End Links
<------------------------------------------------->
General notes and "tricks":


adding a clickable button example:
    <script>
       $(document).ready(function(){
          $("#progress").click(function(){
          $("textarea").toggle();
          });
       });
    </script>

console log message exmaple:
    <script>
      $(document).ready(function(){
        window.onresize = function(event) {
          console.log("Window Has Been Resized");
          };
        });
    </script>

jQuery UI; .draggable() & .resizable():
<script>
   $(document).ready(function() {
      $("#myPopup").draggable();
      $("#myPopup").resizable();
      });
</script>

To Download webpack:
- type -a npm
- cd  /usr/local/bin/npm
- npm install --save-dev webpack

To open WebPack:
- Find the directory it's in (in this case: /usr/local/bin/
- Create a PATH to that file
- make makefile

Original PATH isb desktop:
/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9:/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_9

To get back to "goldfinger" terminal:
- C-c C-c

WITHIN ~/.bash_profile

PATH:
- rename PATH
PATH=$PATH:"..."
- to look
echo $PATH | tr ":" "\n"

Find file:
- type -a fileName
OR
- find . -name "*place to look" -print //does not find well
- grep fileName "*place to look"

Re-type previous command:
- Esp p

Create bash alias:
- alias "newName"=command

Finding something in bundle.js:
- cd webpack-version
- cd dist
- grep "..." bundle.js

Webpack current location:
- npm -> /usr/local/bin/
- cd to webpack-verion and enter "make"

Use Notes to catalog mutiple versions of the same CODE

GitHub: for files on /Users/omar/github/experiments/initialHtml
- cd into initialHtml
- pwd
- git status
- git add "fileName"
- git commit -m "Message about update"
- git push origin master


End General notes
<----------------------------------------------->
Adding toolTip:
.buttonHelpText {
    visibility: hidden;
    width: 120px;
    margin-top: 7px;
    margin-left: -60px;
    background-color: white;
    color: black;
    text-align: center;
    border-radius: 6px;
    border: 1px solid black;
    padding: 5px;

    /* Position the tooltip */
    position: absolute;
    z-index: 1;
}

.menubarButton:hover .buttonHelpText {
    visibility: visible;
}
<------------------------------------------------>
Hiding menu's by clicking on another div:

$("#cyDiv").on("click", function(e) {
   if($("#knockoutMenuItems").is(":visible") || $("#reactivateMenuItems").is(":visible")) {
     $("#knockoutMenuItems").hide();
     $("#reactivateMenuItems").hide();
     }  // hide the menus if visible
   e.stopPropagation();
   e.preventDefault(); // propagation still occurs
   });
<------------------------------------------------>
iQuery and QUnit for unit testing:


- Use an assertion as basis to see if things "pass" or "fail"

- assert.equal determines if the value of something is equal to the expected value. Ex:
- equal(actual, expected [, message])
QUnit.test( "a basic test example", function( assert ) {
      var value = "hello";
      assert.equal(value, "hello", "We expect value to be hello" );
    });

- assert.ok determines if the string or argument is "true" and if it is, it passed. Ex:
- ok(truthy [, message])
    QUnit.test( "ok test", function( assert ) {
      assert.ok( true, "true succeeds" );
      assert.ok( "non-empty", "non-empty string succeeds" );  
      assert.ok( false, "false fails" );
      assert.ok( 0, "0 fails" );
      assert.ok( NaN, "NaN fails" );
      assert.ok( "", "empty string fails" );
      assert.ok( null, "null fails" );
      assert.ok( undefined, "undefined fails" );
    });

- assert.deepEqual is the same as assert.equal but uses (===) as its basis for passing

Example using assert.expect() & assert.async();
assert.async() tells the test that the action was complete
    QUnit.test( "a test", function( assert ) {
      assert.expect( 1 );
      var $body = $( "body" );
      var done = assert.async();
      $body.on( "click", function() {
      assert.ok( true, "body was clicked!" );
      });
      $body.trigger( "click" );
      }); //passes test when body is clicked


End QUnit
<------------------------------------------------>
Fucntions added to webSocketBug/app.R & index.html that create uppercase, lowercase and vector sum functions

APP.R

toUpperCase <- function(wsCon, string)
{
    .lastMessage <<- NULL
    msg <- list(cmd="toUpperCase", callback="handleResult", payload=string)
    my.send(wsCon, msg)

    while(is.null(.lastMessage)){
       Sys.sleep(0.1)
       }

    return(.lastMessage$payload)

} # toUPpperCase
#--------------------------------------------------------------------------------
toLowerCase <- function(wsCon, string)
{
    .lastMessage <<- NULL
    msg <- list(cmd="toLowerCase", callback="handleResult", payload=string)
    my.send(wsCon, msg)

    while(is.null(.lastMessage)){
       Sys.sleep(0.1)
       }

    return(.lastMessage$payload)

} # toLowerCase
#--------------------------------------------------------------------------------
toVectorSum <-  function(wsCon, vector=c(1,2,3)) {
    .lastMessage <<- NULL
    msg <- list(cmd="toVectorSum", callback="handleResult", payload=vector)
    my.send(wsCon, msg)

    while(is.null(.lastMessage)){
        Sys.sleep(0.1)
        }
    return(.lastMessage$payload)
    } #toVectorSum
#--------------------------------------------------------------------------------
handleResult <- function(message) {
    printf("---handleResult")
    .lastMessage <<- message$payload
    NULL
    }
#--------------------------------------------------------------------------------

INDEX.HTML

function dispatchMessage(incomingMessage) {
         console.log("--- dispatchMessage")
	 var cmd = incomingMessage.cmd;
         var payload = incomingMessage.payload;
	 switch(cmd) {
	    case "toUpperCase":
	       upperCase(payload);
      	       break;
	    case "toLowerCase":
               lowerCase(payload);
	       break;
	    case "toVectorSum":
	       vectorSum(payload);
	       break;
	       }
	 }

      function upperCase(payload) {
          outgoingText = payload.toUpperCase();
	  returnMessage = JSON.stringify({cmd: payload.callback,
	                                       callback: "",
					       payload: outgoingText});
          console.log(outgoingText);
	  ws.send(returnMessage);
	  }

      function lowerCase(payload) {
          outgoingText = payload.toLowerCase();
	  returnMessage = JSON.stringify({cmd: payload.callback,
	                                  callback: "",
					  payload: outgoingText});
          console.log(outgoingText);
	  ws.send(returnMessage);
	  }

      function vectorSum(payload) {
          outgoingText =addVector(payload);
	  returnMessage = JSON.stringify({cmd: payload.callback,
	                                  callback: "",
					  payload: outgoingText});
          console.log(outgoingText);
	  ws.send(returnMessage);
	  }

      function addVector(vec) {
          var total = 0;
	  for(i=0; i<vec.length; i++) {
	     total += vec[i];
	     };
          return(total);
	  }

End webSocketBug/app.R & index.html
<------------------------------------------------>
R Related Things:


R, see current directory:
- getwd

R, keeping a column from a matrix in matrix form:
- "matrixName"[,1,drop=FALSE]

R, currect directory of matrices availble: ls()

R, remove element from directory: rm(element)

R, Data from excel (as .csv);
- Auto-read.csv("~/location/of/file")
- names(Auto)
- dim(Auto)
- class(Auto)
- summary(Auto)
--- to plot columns of excel file ---
- plot(Auto$columnName1, Auto$columnName2)


R, creating random set of data:
- set.seed(101)
- x=matrix(rnorm(100*2),100,2)
- xmean=matrix(rnorm(8,sd=4),4,2)
- which=sample(1:4,100,replace=TRUE)
- x=x+xmean[which,]

k-mean plotting above data:
- plot(x, col=which,pch=19)
- km.out=kmeans(x,4,nstart=15)
- km.out
- plot(x, col=km.out$cluster,cex=2,pch=1,lwd=2)
- points(x,col=which,pch=19)
- points(x,col=c(4,3,2,1)[which],pch=19)

hierarchical cluster plot of above data:
- hc.complete=hclust(dist(x),method="complete")
- plot(hc.complete)
- hc.single=hclust(dist(x),method="single")
- plot(hc.single)
- hc.average=hclust(dist(x),method="average")
- plot(hc.average)


End R Stuff
<---------------------------------------------------->

